generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                     @id @default(autoincrement())
  userdp                    String?
  email                     String                  @unique
  name                      String
  introductoryFlow          Boolean                 @default(false)
  premium                   Boolean                 @default(false)
  notifications             Notification[]          @relation("UserNotifications") // Added missing relation
  findPaths                 Int                    @default(0)
  SenderNotifications       Notification[]          @relation("SenderUserNotifications") // Added missing relation
  posts                     Post[]                  @relation("UserPosts")
  evaluationsStarted        Evaluation[]            @relation("EvaluationRequester")
  evaluationsReceived       Evaluation[]            @relation("EvaluationRecipient")
  intermediaryPaths         Path[]                  @relation("UserAsIntermediary")
  connections               Connection[]            @relation("ConnectionRequester")
  connectionsReceived       Connection[]            @relation("ConnectionRecipient")
  evaluationApprovals       EvaluationApprovals[]   @relation("EvaluationApprovalsRequester")
  evaluationApprovalsReceived EvaluationApprovals[] @relation("EvaluationApprovalsRecipient")
  comments                  Comment[]
  merchants                 Merchant[]
  userDetails               UserDetails?
  createdAt                 DateTime @default(now()) // Fixed nullable issue
  employees                 Employee[]
  premiumSubscriptions PremiumSubscription[] 
  interestSubcategories  UserSubcategory[]


  @@index([email])
  @@index([id])
}

model UserSubcategory {
  id             Int          @id @default(autoincrement())
  userId         Int
  subcategoryId  Int
  user           User         @relation(fields: [userId], references: [id])
  subcategory    InterestSubcategory  @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  @@unique([userId, subcategoryId])
}
model InterestCategory {
  id            Int           @id @default(autoincrement())
  name          String
  subcategories InterestSubcategory[]
}
model InterestSubcategory {
  id           Int           @id @default(autoincrement())
  name         String
  categoryId   Int
  category     InterestCategory      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  segments     Segment[]
  users        UserSubcategory[]
}
model Segment {
  id            Int          @id @default(autoincrement())
  name          String
  subcategoryId Int
  subcategory   InterestSubcategory  @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
}

model PremiumSubscription {
  id          Int      @id @default(autoincrement())
  userId      Int
  plan        String   @default("monthly") // 'monthly' or 'yearly'
  paidAmount  Float
  createdAt   DateTime @default(now())
  expiry      DateTime

  user        User     @relation(fields: [userId], references: [id]) // ðŸ‘ˆ Foreign key
}
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation("UserNotifications",fields: [userId], references: [id]) // Fixed relation
  postId    Int?
  post     Post?    @relation(fields: [postId],references: [id])
  senderName String?
  senderMail String?
  senderId   Int?
  senderUser      User?     @relation("SenderUserNotifications",fields: [senderId], references: [id]) // Fixed relation
  type      String   // e.g., "LIKE", "COMMENT", "FOLLOW", etc.
  content   String   // Notification message
  status    STATUS?   
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])  // Index for faster lookups
  @@index([postId])
}
enum STATUS {
    accepted
    rejected
    pending

}
model Random {
  id        Int      @id @default(autoincrement())
  userId    Int
}
model UserDetails {
  id           Int       @id @default(autoincrement())
  bio          String?
  displayImage String?
  phoneNumber  String?
  userId       Int       @unique
  user         User      @relation(fields: [userId], references: [id])
  addresses    Address[] // One-to-many relation
}

model Address { 
  id            Int      @id @default(autoincrement())
  type          String?   // e.g., 'home', 'work', 'other'
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  country       String?
  zip           String?
  landmark      String?   // Optional: for easier navigation
  instructions  String?   // Optional: delivery instructions
  userDetailsId Int
  orderId       String?
  userDetails   UserDetails @relation(fields: [userDetailsId], references: [id])
  // order         Order? @relation(fields: [orderId], references: [order_id])

  @@unique([userDetailsId, type]) // Prevent duplicate types like 2 "home"
}

model EvaluationApprovals {
  id                Int           @id @default(autoincrement())
  requesterId       Int
  requester         User          @relation("EvaluationApprovalsRequester", fields: [requesterId], references: [id])
  recipientId       Int
  recipient         User          @relation("EvaluationApprovalsRecipient", fields: [recipientId], references: [id])
  status            String        @default("PENDING")
  evaluationIds     Int[]
  evaluationWorked  Int?
  createdAt         DateTime      @default(now())

  @@unique([requesterId, recipientId,createdAt])
}

model Evaluation {
  id             Int           @id @default(autoincrement())
  requesterId    Int
  requester      User          @relation("EvaluationRequester", fields: [requesterId], references: [id])
  recipientId    Int
  recipient      User          @relation("EvaluationRecipient", fields: [recipientId], references: [id])
  status         String        @default("ONGOING")
  paths          Path[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Path {
  id             Int           @id @default(autoincrement())
  evaluationId   Int
  evaluation     Evaluation    @relation(fields: [evaluationId], references: [id])
  intermediaryId Int
  intermediary   User          @relation("UserAsIntermediary", fields: [intermediaryId], references: [id])
  approved       String        @default("FALSE")
  new_order      Int
  order          Int
  createdAt      DateTime      @default(now())

  @@unique([evaluationId, intermediaryId])
}
 
model Connection {
  id                Int           @id @default(autoincrement())
  requesterId       Int
  requester         User          @relation("ConnectionRequester", fields: [requesterId], references: [id])
  recipientId       Int
  recipient         User          @relation("ConnectionRecipient", fields: [recipientId], references: [id])
  status            String        @default("PENDING")
  StrengthLevel     Int?
  createdAt         DateTime      @default(now())

  @@unique([requesterId, recipientId,createdAt])
}

model Post {
  id              Int       @id @default(autoincrement())
  userId          Int
  user            User      @relation("UserPosts", fields: [userId], references: [id])
  content         String?
  imageUrl        String[]
  videoUrl        String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  likes           String[]     @default([])
  shares          Int[]     @default([])
  comments        Comment[]
  // businessPageId  Int?
  // business        BusinessPageLayout? @relation(fields: [businessPageId], references: [id])
  reports         Int[]     @default([])
  reportReasons   String[]  @default([])
  notifications   Notification[]  

  @@index([userId])
}

model Comment {
  id          Int       @id @default(autoincrement())
  postId      Int
  post        Post      @relation(fields: [postId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parentId    Int?      // Optional field for replies, null for top-level comments
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies") // Replies to this comment

  // Optionally, you can add other fields like likes, shares, etc.
}
model Merchant {
  id                              Int        @id @default(autoincrement()) // Primary key
  userId                          Int        @unique  // Foreign key reference to User table
  user                            User       @relation(fields: [userId], references: [id])
  Merchant_Id                     String     @unique  @default(uuid())
  Name                            String
  MobileNumber                    String?
  AlternativeMobileNumber         String?
  UPI_ID                          String?
  Email                           String?
  PermanentAdress                 String?
  AadharNumber                    String?    @unique
  PAN                             String?
  businesses                      Business[] // A merchant can own multiple businesses
  additionalFields                Json?     // JSONB field for extra flexibility
  createdAt                       DateTime  @default(now())
  updatedAt                       DateTime  @updatedAt
}

model Business {
  id                             Int       @id @default(autoincrement()) // Primary key
  merchantId                     String       // Foreign key reference to Merchant (One business â†’ One owner)
  merchant                       Merchant  @relation(fields: [merchantId], references: [Merchant_Id])
  Business_Id                    String    @unique  @default(uuid())
  Business_Name                  String
  Business_Email                 String?   @unique
  Business_Address               String?
  Entity                         String?    //(Ex - Sole Proprietorship, Partnership, LLP, Pvt Ltd etc.)
  Sector                         String?    //(Ex - Retail, Manufacturing, Services etc.)
  GSTIN                          String?   @unique
  Business_Mobile_Number         String?   @unique
  Alternate_Mobile_Number        String?
  Udyam_Registration_Number      String?        
  Business_UPI_ID                String?   @unique
  Bank_Account_Number            String?
  IFSC_CODE                      String?
  // businessPageLayout             BusinessPageLayout[]
   businessToPageLayouts          BusinessToPageLayout[]
   // Foreign key reference to BusinessPageLayout


  createdAt                      DateTime  @default(now())
  updatedAt                      DateTime  @updatedAt

  @@index([merchantId])  // Index for better querying
  @@index([merchantId,Business_Id])
  @@index([Business_Id])
  @@index([id]) 
}
model Offer {
  id              Int        @id @default(autoincrement())
  businessPageId  String        // The user who created the offer
  business        BusinessPageLayout       @relation(fields: [businessPageId], references: [pageId])

  title           String     // Offer title (e.g., "Diwali Sale 50% Off")
  description     String?    // Optional details about the offer
  image          String?    // Offer banner or image
  discountType    DiscountType // Can be FLAT or PERCENTAGE
  discountValue   Float      // The discount value (amount or percentage)
  
  applicableCategories Category[] @relation("OfferCategories") // Offer applies to these categories
  applicableProducts  Product[]  @relation("OfferProducts")  // Offer applies to these products
  
  startDate       DateTime  // When the offer starts
  endDate         DateTime  // When the offer expires
  isActive        Boolean   @default(true) // Whether the offer is currently active

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum DiscountType {
  FLAT        // Flat amount discount (e.g., â‚¹500 off)
  PERCENTAGE  // Percentage discount (e.g., 20% off)
}
model Category {
  id               Int       @id @default(autoincrement())
  name             String    
  businessPageId   String?
  business         BusinessPageLayout? @relation(fields: [businessPageId], references: [pageId])  
  parentCategoryId Int?      // Nullable parent category
  parentCategory   Category? @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subcategories    Category[] @relation("CategoryHierarchy") // Subcategories

  products         Product[] // Products in this category
  offers           Offer[] @relation("OfferCategories") // Offers on this category
  images           String[]  // Category images (banners, thumbnails)
  categoryCarouselId Int?
  categoryCarousel CategoryCarousel? @relation(fields: [categoryCarouselId],references: [id],onDelete: Cascade)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
}

model Product {
  id              Int       @id @default(autoincrement())
  businessPageId  String?      
  business        BusinessPageLayout? @relation(fields: [businessPageId], references: [pageId])  
  name            String
  description     String?
  categoryId      Int?      
  category        Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  basePrice       Float?    
  BeforeDiscountPrice Float?
  Sales           Int?
  stock           Int?       @default(0)
  SKU             String? 
  images          String[]  
  offers          Offer[] @relation("OfferProducts") 
  categoryCarouselId Int?
  categoryCarousel CategoryCarousel? @relation(fields: [categoryCarouselId], references: [id], onDelete: Cascade)
  fields  Field[]
  counter Counter[]
  recieveBy   String[]      
  deliveryCharge  Float?      @default(0) // specific to this product
  takeawayCharge  Float?      @default(0)
  dineinCharge    Float?      @default(0)
  ProductAlertsBeforeCart    String?

  // Symmetric many-to-many self-relation
  variants ProductVariant[] @relation("ProductToVariant_A")
  variantOf ProductVariant[] @relation("ProductToVariant_B")
  orderItems   OrderItem[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum RecieveBy {
  DELIVERY
  DINEIN
  TAKEAWAY
}


model ProductVariant {
  id         Int     @id @default(autoincrement())
  productA   Product @relation("ProductToVariant_A", fields: [productAId], references: [id], onDelete: Cascade)
  productAId Int
  productB   Product @relation("ProductToVariant_B", fields: [productBId], references: [id], onDelete: Cascade)
  productBId Int
  
  // Relation type (color, storage, size, etc.)
  relationType String?
  
  // Optional description for the relationship
  description String?

  // @@unique([productAId, productBId, relationType])
}

model BusinessToPageLayout { 
  id                Int               @id @default(autoincrement())
  businessId        String
  business          Business          @relation(fields: [businessId], references: [Business_Id])
  businessPageLayoutId Int
  businessPageLayout BusinessPageLayout @relation(fields: [businessPageLayoutId], references: [id])
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([businessId, businessPageLayoutId])
  @@index([businessId])
  @@index([businessPageLayoutId])
}

model BusinessPageLayout {
  id                  Int                 @id @default(autoincrement())
  businessToPageLayouts BusinessToPageLayout[]
  // businessId          String  
  // business           Business             @relation(fields: [businessId], references: [Business_Id])
  name                String              @default("Page Name")
  pageId              String              @unique  @default(uuid())
  description         String?  
  bannerImageUrls     String[]  
  dpImageUrl          String?   
  categoryCarousel    CategoryCarousel?   @relation(name: "BusinessPageLayoutToCategoryCarousel") // No fields/references here
  products            Product[]
  categories          Category[]
  offers              Offer[]
  category            String?
  location            String?
  employees           Employee[]
  payouts             Payout[]
  visibility          Boolean             @default(false)
  PageAlertsBeforeCart    String?

  // posts               Post[]
  task                Task[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@index([pageId])
}

model Payout {
  id               Int       @id @default(autoincrement())
  payout_id        String    @unique @default(cuid())
  businessPageId   String
  businessPage     BusinessPageLayout @relation(fields: [businessPageId], references: [pageId])
  payoutAmount     Decimal   @db.Decimal(12, 2)
  payoutForDate    DateTime              // The date the payout is for (revenue day)
  orders           Order[]
  status           PayoutStatus @default(PENDING)
  createdAt        DateTime  @default(now()) // When payout was actually made

}

enum PayoutStatus {
  PAID
  PENDING
}

model Order {
  id          String     @id @default(cuid())
  order_id    String     @unique
  userId      Int
  orderItems  OrderItem[]
  totalCost   Float
  transaction Transaction? @relation(name: "OrderToTransaction")
  status      String     @default("pending")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  address     Json? 
  fulfillmentStatus String  @default("pending")
  payoutId    String? 
  payout      Payout?   @relation(fields: [payoutId],references: [payout_id])
  tasks       Task[]     // This is still valid; it's a reverse relation.

  @@index([order_id])
}



model Employee {
  id          Int                 @id @default(autoincrement())
  user        User                @relation(fields: [userId], references: [id])
  userId      Int
  business    BusinessPageLayout  @relation(fields: [businessId], references: [pageId])
  businessId  String
  job         Job?                @relation(fields: [jobId], references: [id])
  jobId       Int?
  tasks       Task[]              // This is also valid; it's a reverse relation.

  @@unique([userId, businessId], name: "task_employee_unique") // A user has one job per business
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String?
  status      String   @default("pending") // or "completed" or "pending" or "reassigned"
  task_id     String
  order       Order    @relation(fields: [task_id], references: [order_id])
  employee    Employee @relation(fields: [employeeId], references: [id])
  employeeId  Int
  business    BusinessPageLayout? @relation(fields: [businessId], references: [pageId])
  businessId  String?             // <-- Add this
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  // @@unique([task_id, employeeId,status]) // Prevent duplicate employee assignment to same order
}
model Job {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  employees   Employee[]
}


model OrderItem {
  id        Int       @id @default(autoincrement())
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int       @default(1)
  OTP         String?   
  productFulfillmentStatus  String? @default("pending")
  cancellationReason      String?
  details    Json?
  outForDelivery String? @default("FALSE")
  customization Json?
  recieveBy     Json?
}



model Cart {
  id          String   @id @default(cuid()) // Unique cart ID
  userId      Int       @unique // ID of the user who owns the cart
  productIds  Int[] // Array of product IDs
  
  cartItems   Json   // JSON field for product-specific details like customizations
  totalCost   Float    // Total cost of items in cart
  
  address     String?  // Optional address in case the user saves it before checkout
  createdAt   DateTime @default(now()) // Cart creation timestamp
  updatedAt   DateTime @updatedAt       // Timestamp for last update
}

model Transaction {
  id               String   @id @default(cuid())
  orderId          String   @unique
  order            Order    @relation(name:"OrderToTransaction",fields: [orderId], references: [order_id])
  transactionId    String   @unique
  paymentStatus    String
  paymentAmount    Float
  paymentCurrency  String
  paymentMode      String
  paymentTime      DateTime
  bankReference    String?
  paymentMessage   String?
  customerEmail    String
  customerPhone    String
  customerName     String
  paymentDetails   Json     // Store full webhook data
  createdAt        DateTime @default(now())
  @@index([transactionId])
}




model CategoryCarousel {
  id                 Int                 @id @default(autoincrement())
  name               String?
  imageUrl           String? 
  businessPageId     String?                @unique
  business          BusinessPageLayout?   @relation(name: "BusinessPageLayoutToCategoryCarousel", fields: [businessPageId], references: [pageId], onDelete: Cascade) // Define fields/references here
  categories         Category[]
  products           Product[]
}

model Field {
  id        Int      @id @default(autoincrement())
  name      String   // Field name (e.g., "Toppings")
  keyValues Json     // Stores multiple key-value pairs as JSON
  type      String   // Defines the type (e.g., "Cost", "Length")
  productId Int
  showCost  Boolean? @default(false)
  product   Product  @relation(fields: [productId], references: [id],onDelete:Cascade)
}

model  Counter {
  id        Int      @id @default(autoincrement())
  name      String?   // Field name (e.g., "Toppings")
  keyValues Json?     // Stores multiple key-value pairs as JSON
  type      String?   // Defines the type (e.g., "Cost", "Length")
  description String?
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// model CategoryCarouselCategory {
//   id          Int @id @default(autoincrement())
//   categoryId  Int
//   category    Category @relation(fields: [categoryId], references: [id])
  
//   carouselId  Int
//   carousel    CategoryCarousel @relation(fields: [carouselId], references: [id])
// }

// model CategoryCarouselProduct {
//   id          Int @id @default(autoincrement())
//   productId   Int
//   product     Product @relation(fields: [productId], references: [id])
  
//   carouselId  Int
//   carousel    CategoryCarousel @relation(fields: [carouselId], references: [id])
// }